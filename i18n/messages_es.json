{
	"pathString" : "Cadena",

	"nameString"           : "Cadena",
	"openingQuotationMark" : "‚Äú",
	"closingQuotationMark" : "‚Äù",
	"enterString"          : "Introduzca cadena",
	"updateString"         : "Actualice cadena",
	"leafString"           : "Cadena",

	"namePassword"  : "Contrase√±a",
	"enterPassword" : "Introuzca contrae√±a",
	"leafPassword"  : "Contrase√±a",

	"nameLength"     : "Longitud de cadena",
	"mnemonicLength" : "Longitud",
	"leafLength"     : "Longitud",

	"nameConcatenation"     : "Concatenaci√≥n",
	"operatorConcatenation" : "üîó",
	"leafConcatenation"     : "üîó",

	"nameSubstringToPos"     : "Subcadena de posici√≥n a posici√≥n",
	"mnemonicSubstringToPos" : "SubcadenaPosPos",
	"leafSubstringToPos"     : "Subcadena de posici√≥n a posici√≥n",
	"childrenSubstringToPos" : [ "Cadena a extraer subcadena", "Posici√≥n inicial", "Posici√≥n final" ],

	"nameSubstringToN"     : "Subcadena de posici√≥n a n√∫mero de caracteres",
	"mnemonicSubstringToN" : "SubcadenaPosN",
	"leafSubstringToN"     : "Subcadena de posici√≥n a n√∫mero de caracteres",
	"childrenSubstringToN" : [ "Cadena a extraer subcadena", "Posici√≥n inicial", "N√∫mero of caracteres" ],

	"nameSubstring"     : "Subcadena de posici√≥n al final",
	"mnemonicSubstring" : "SubcadenaPosFin",
	"leafSubstring"     : "Subcadena de posici√≥n al final",
	"childrenSubstring" : [ "Cadena a extraer subcadena", "Posici√≥n inicial" ],

	"childrenSearch" : [ "Cadena en one buscar", "Subcadena a buscar" ],

	"nameIndex"     : "Posici√≥n de primera ocurrencia",
	"mnemonicIndex" : "Posici√≥n",
	"leafIndex"     : "Posici√≥n de primera ocurrencia",

	"nameIndexes"     : "Posiciones de ocurrencias",
	"mnemonicIndexes" : "Posiciones",
	"leafIndexes"     : "Posiciones de ocurrencias",

	"nameContains"     : "¬øContiene subcadena?",
	"operatorContains" : "¬øContiene?",
	"leafContains"     : "¬øContiene subcadena?",

	"nameStartsWith"     : "¬øComienza con?",
	"operatorStartsWith" : "¬øComienzaCon?",
	"leafStartsWith"     : "¬øComienza con?",

	"nameEndsWith"     : "¬øTermina con?",
	"operatorEndsWith" : "¬øTerminaCon?",
	"leafEndsWith"     : "¬øTermina con?",

	"nameUppercase"     : "May√∫sculas",
	"mnemonicUppercase" : "May√∫sculas",
	"leafUppercase"     : "May√∫sculas",

	"nameLowercase"     : "Min√∫sculas",
	"mnemonicLowercase" : "Min√∫sculas",
	"leafLowercase"     : "Min√∫sculas",

	"nameReplace"     : "Reemplaza primera ocurrencia",
	"mnemonicReplace" : "ReemplazaPrimera",
	"leafReplace"     : "Reemplaza primera ocurrencia",
	"childrenReplace" : [ "Cadena en donde reemplazar", "Subcadena a reemplazar", "Nueva subcadena" ],

	"nameReplaceAll"     : "Reemplaza todas las ocurrencias",
	"mnemonicReplaceAll" : "ReemplazaTodas",
	"leafReplaceAll"     : "Reemplaza todas las ocurrencias",

	"nameTrim"     : "Recortar",
	"mnemonicTrim" : "Recortar",
	"leafTrim"     : "Recortar",

	"nameMatches"     : "¬øConcuerda?",
	"operatorMatches" : "¬øConcuerda?",
	"leafMatches"     : "¬øConcuerda?",
	"childrenMatches" : [ "Cadena en one buscar concordancias", "Cadena a ser utilizaa como patr√≥n" ],

	"nameSplit"     : "Divisi√≥n",
	"mnemonicSplit" : "Divisi√≥n",
	"leafSplit"     : "Divisi√≥n",
	"childrenSplit" : [ "Cadena a ser dividida", "Especificaci√≥n. Un n√∫mero (cada n), una lista de n√∫meros, una subcadena (separador)" ],

	"nameFormat"     : "Formatear",
	"mnemonicFormat" : "Formatear",
	"leafFormat"     : "Formatear",

	"nameReverse"     : "Inversi√≥n",
	"mnemonicReverse" : "Invertir",
	"leafReverse"     : "Inversi√≥n",

	"nameEncode"     : "Codificaci√≥n de cadena a partir de lista de c√≥digos Unicode",
	"mnemonicEncode" : "Codificar",
	"leafEncode"     : "Codificaci√≥n a cadena",

	"nameDecode"     : "Creaci√≥n de lista de c√≥digos Unicode a partir de una cadena",
	"mnemonicDecode" : "Decodificar",
	"leafDecode"     : "Decodificaci√≥n de cadena",

	"nameToString"     : "Conversi√≥n a cadena",
	"mnemonicToString" : "Cadena",
	"leafToString"     : "Conversi√≥n a cadena",
	"childrenToString" : [ "Expresi√≥n a ser convertida a cadena", "Modificador" ],

	"nameToText"     : "Conversi√≥n a texto",
	"mnemonicToText" : "Texto",
	"leafToText"     : "Conversi√≥n a texto",
	
	"nameToRegularExpression"     : "Conversi√≥n a expresi√≥n regular",
	"mnemonicToRegularExpression" : "Expresi√≥nRegular",
	"leafToRegularExpression"     : "Conversi√≥n a expresi√≥n regular",
	
	"nameToPassword"     : "Conversi√≥n a contrase√±a",
	"mnemonicToPassword" : "Contrase√±a",
	"leafToPassword"     : "Conversi√≥n a contrase√±a"
}
